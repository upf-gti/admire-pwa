{"version":3,"sources":["components/audioGain.js","pages/Devices.jsx"],"names":["time","performance","now","microphone_gain_data","Array","AudioGain","stream","show","useState","ctx","setCtx","analyser","setAnalyser","microphone","setMicrophone","javascriptNode","setJavascriptNode","vol","setVol","ref","useRef","onAudioProcess","array","Uint8Array","frequencyBinCount","getByteFrequencyData","avg","reduce","a","b","length","shift","push","Math","round","window","useEffect","AudioContext","createAnalyser","createMediaStreamSource","createScriptProcessor","smoothingTimeConstant","fftSize","connect","destination","onaudioprocess","resume","suspend","from","v","i","style","background","media","useContext","MediaContext","test","setTest","init","stop","id","Row","Col","localStream","isLocal","FloatingLabel","className","controlId","label","Form","Select","value","settings","video","onChange","target","setVideo","devices","Object","keys","map","k","resolution","resolutions","audio","setAudio","Switch","name","e","t","defaultChecked"],"mappings":"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","file":"static/js/3.162cada6.chunk.js","sourcesContent":["import {Button} from 'react-bootstrap'\r\nimport {useEffect, useRef, useState} from 'react';\r\n\r\nlet time = performance.now();\r\nconst microphone_gain_data = new Array(10);\r\n\r\nexport default function AudioGain({stream, show}) {\r\n    let [ctx,setCtx] = useState(null);\r\n    let [analyser,setAnalyser] = useState(null);\r\n    let [microphone,setMicrophone] = useState(null);\r\n    let [javascriptNode,setJavascriptNode] = useState(null);\r\n    let [vol, setVol] = useState(0);\r\n    const ref = useRef();\r\n    \r\n    window.ctx = ctx;\r\n    useEffect(()=>{\r\n        /*if(ctx){\r\n            ctx.close();\r\n            javascriptNode = undefined;\r\n        }\r\n        time = performance.now();*/\r\n\r\n        ctx            = new AudioContext();\r\n        analyser       = ctx.createAnalyser();\r\n        microphone     = ctx.createMediaStreamSource(stream);\r\n        javascriptNode = ctx.createScriptProcessor(256, 1, 1);\r\n      \r\n        analyser.smoothingTimeConstant = 0.8;\r\n        analyser.fftSize = 1024;\r\n      \r\n        microphone.connect(analyser);\r\n        analyser.connect(javascriptNode);\r\n        javascriptNode.connect(ctx.destination);\r\n        javascriptNode.onaudioprocess = onAudioProcess;\r\n\r\n        setCtx(ctx);setAnalyser(analyser);setMicrophone(microphone);setJavascriptNode(javascriptNode);\r\n\r\n  \r\n    }, [stream]);\r\n\r\n    useEffect(()=>{\r\n        if(!ctx) return;\r\n        switch(show){\r\n            case true:\r\n                ctx.resume();\r\n                break;\r\n\r\n            case false: \r\n                ctx.suspend();\r\n                setVol(0);\r\n                break;\r\n        }\r\n        return ()=>{\r\n            ctx.suspend();\r\n        }\r\n    }, [show]);\r\n\r\n    function onAudioProcess(){\r\n        if(performance.now() - time < 24 ) return;\r\n        time = performance.now();\r\n\r\n        var array = new Uint8Array(analyser.frequencyBinCount);\r\n        analyser.getByteFrequencyData(array);\r\n        var values = 0;\r\n        const avg = array.reduce((a,b) => a + b, 0) / array.length;\r\n\r\n        microphone_gain_data.shift();\r\n        microphone_gain_data.push(Math.round(avg));\r\n        window.microphone_gain_data = microphone_gain_data;\r\n\r\n        let v = .75;\r\n        //console.log(avg);\r\n        //setVol(a => Math.round(a * (1-v) + avg * v));\r\n        setVol(avg);\r\n\r\n    }\r\n\r\n\r\n    return <>\r\n        <div className=\"pids-wrapper\" ref={ref}>{\r\n            Array.from({length:10},(v,i)=>{\r\n                return <div key={i} className={`pid`} style={{background:  (i*10)<vol? '#69ce2b':'#e6e7e8'}}></div>\r\n            })\r\n        }\r\n        </div>\r\n        <style global jsx>{`\r\n            .pids-wrapper{\r\n                width: 100%;\r\n                line-height: 1.5rem;\r\n            }\r\n            .pid{\r\n                width: calc(10% - 2px);\r\n                height: 10px;\r\n                display: inline-block;\r\n                margin: 1px;\r\n            }\r\n        `}</style>\r\n    </>;\r\n}","import MD from \"utils/md\"\r\nimport {useContext, useEffect, useState} from \"react\"\r\nimport AudioGain from 'components/audioGain'\r\nimport {Row, Col, FloatingLabel, Form} from 'react-bootstrap'\r\nimport { MediaContext } from 'utils/ctx_mediadevices'\r\nimport Video from 'partials/video'\r\n\r\nexport default ()=>{\r\n\r\n    const media = useContext(MediaContext);\r\n    const [test, setTest] = useState(false);\r\n\r\n    useEffect(()=>{\r\n        media.init();\r\n    return ()=>{\r\n        media.stop();\r\n        setTest(false);\r\n    }}, []);\r\n\r\n    return <div id='devices'>\r\n\r\n        <Row id='devices-row'>\r\n\r\n            <Col>\r\n                <Video id=\"local\" stream={media.localStream} isLocal={!test} />\r\n            </Col>\r\n\r\n            <Col>\r\n                <FloatingLabel className=\"pb-1\" controlId=\"floatingSelect\" label={<span> <i className=\"bi bi-camera-video\" /> Video devices</span>}>\r\n                <Form.Select value={media.settings?.video ?? \"None\"} onChange={({ target }) => {\r\n                    media.setVideo(target.value);\r\n                }}>\r\n                {media.devices?.video && Object.keys(media.devices?.video).map((v, k) => <option key={k} value={v}>{v}</option>)}\r\n                {!media.devices?.video && <option key={0}>No video devices found</option>}\r\n                </Form.Select>\r\n                </FloatingLabel>\r\n\r\n                {<FloatingLabel className=\"pb-1\" controlId=\"floatingSelect\" label={<span> <i className=\"bi bi-camera-video\" /> Video resolutions</span>}>\r\n                <Form.Select value={media.settings?.resolution ?? \"Undefined\"} onChange={({target}) => {\r\n                    media.setVideo(media.settings?.video ?? \"None\", target.value);\r\n                }}>\r\n                {media.resolutions && Object.keys(media.resolutions).map((v, k) => <option key={k} value={v}>{v}</option>)}\r\n                {!media.resolutions && <option key={0}>No video resolutions found</option>}\r\n                </Form.Select>\r\n                </FloatingLabel>}\r\n\r\n                <FloatingLabel className=\"pb-1\" controlId=\"floatingSelect\" label={<span> <i className=\"bi bi-mic\" /> Audio devices</span>}>\r\n                <Form.Select value={media.settings?.audio ?? \"None\"} onChange={({ target }) => media.setAudio(target.value)}>\r\n                {media.devices?.audio && Object.keys(media.devices?.audio).map((v, k) => <option key={k} value={v}>{v}</option>)}\r\n                {!media.devices?.audio && <option key={0}>No audio devices found</option>}\r\n                </Form.Select>\r\n                </FloatingLabel>\r\n                \r\n                <div className='d-flex'>\r\n                <Form.Switch id=\"hear-switch\" label=\"test\" className=\"me-2 user-select-none\" name=\"test-input\" onChange={(e)=>setTest(t => !t)} defaultChecked={test}/>\r\n                <AudioGain stream={media.localStream} show={test} />\r\n                </div>\r\n\r\n            </Col>\r\n        </Row>\r\n\r\n        <style global jsx>{`\r\n   \r\n            #page video {\r\n                object-fit: cover !important;\r\n                max-height: 25vh;\r\n            }\r\n\r\n            @media (orientation: landscape){\r\n                #devices{\r\n                    #devices-row{\r\n                        flex-direction: row !important;\r\n                    }\r\n                }\r\n            }\r\n            @media (orientation: portrait){\r\n                #devices{\r\n                    #devices-row{\r\n                        flex-direction: column !important;\r\n                    }\r\n                }\r\n            }\r\n        `}</style>\r\n    </div>\r\n}"],"sourceRoot":""}