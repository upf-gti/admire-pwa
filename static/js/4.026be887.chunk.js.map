{"version":3,"sources":["components/audioGain.js","pages/Devices.jsx"],"names":["time","performance","now","microphone_gain_data","Array","AudioGain","stream","show","ref","useRef","ctx","analyser","microphone","javascriptNode","useState","vol","setVol","onAudioProcess","array","Uint8Array","current","frequencyBinCount","getByteFrequencyData","avg","reduce","a","b","length","shift","push","Math","round","window","useEffect","AudioContext","createAnalyser","createMediaStreamSource","createScriptProcessor","smoothingTimeConstant","fftSize","connect","destination","onaudioprocess","resume","suspend","from","v","i","style","background","media","useContext","MediaContext","test","setTest","init","stop","id","Row","Col","md","localStream","isLocal","FloatingLabel","className","controlId","label","Form","Select","value","settings","video","onChange","target","setVideo","devices","Object","keys","map","k","resolution","resolutions","audio","setAudio","Switch","name","e","t","defaultChecked"],"mappings":"2MAEIA,EAAOC,YAAYC,MACjBC,EAAuB,IAAIC,MAAM,IAExB,SAASC,EAAT,GAAoC,IAAhBC,EAAe,EAAfA,OAAQC,EAAO,EAAPA,KACjCC,EAAiBC,mBACjBC,EAAiBD,mBACjBE,EAAiBF,mBACjBG,EAAiBH,mBACjBI,EAAiBJ,mBACvB,EAAuBK,mBAAS,GAAhC,mBAAOC,EAAP,KAAYC,EAAZ,KAsCA,SAASC,IAAiB,IAAD,IACrB,KAAGhB,YAAYC,MAAQF,EAAO,IAA9B,CACAA,EAAOC,YAAYC,MAEnB,IAAIgB,EAAQ,IAAIC,WAAJ,UAAeR,EAASS,eAAxB,aAAe,EAAkBC,mBAC7C,UAAAV,EAASS,eAAT,SAAkBE,qBAAqBJ,GACvC,IAAMK,EAAML,EAAMM,QAAO,SAACC,EAAEC,GAAH,OAASD,EAAIC,IAAG,GAAKR,EAAMS,OAEpDxB,EAAqByB,QACrBzB,EAAqB0B,KAAKC,KAAKC,MAAMR,IACrCS,OAAO7B,qBAAuBA,EAK9Ba,EAAOO,IAKX,OAxDAS,OAAOtB,IAAMA,EACbuB,qBAAU,WAAK,IAAD,QAMVvB,EAAIU,QAAqB,IAAIc,aAC7BvB,EAASS,QAAT,UAAyBV,EAAIU,eAA7B,aAAyB,EAAae,iBACtCvB,EAAWQ,QAAX,UAAyBV,EAAIU,eAA7B,aAAyB,EAAagB,wBAAwB9B,GAC9DO,EAAeO,QAAf,UAAyBV,EAAIU,eAA7B,aAAyB,EAAaiB,sBAAsB,IAAK,EAAG,GAEpE1B,EAASS,QAAQkB,sBAAwB,GACzC3B,EAASS,QAAQmB,QAAU,KAE3B3B,EAAWQ,QAAQoB,QAAQ7B,EAASS,SACpCT,EAASS,QAAQoB,QAAQ3B,EAAeO,SACxCP,EAAeO,QAAQoB,QAAvB,UAA+B9B,EAAIU,eAAnC,aAA+B,EAAaqB,aAC5C5B,EAAeO,QAAQsB,eAAiBzB,IAEzC,CAACX,IAEJ2B,qBAAU,WAAK,IAAD,EACV,GAAIvB,EAAJ,CAGM,IAAD,EAFL,GAAGH,EACC,UAAAG,EAAIU,eAAJ,SAAauB,cAEb,UAAAjC,EAAIU,eAAJ,SAAawB,UACb5B,EAAO,GAGX,OAAO,WAAK,IAAD,EACP,UAAAN,EAAIU,eAAJ,SAAawB,cAElB,CAACrC,IAsBG,qCACH,qBAA8BC,IAAKA,EAAnC,gDACIJ,MAAMyC,KAAK,CAAClB,OAAO,KAAI,SAACmB,EAAEC,GACtB,OAAO,qBAA+BC,MAAO,CAACC,WAAgB,GAAFF,EAAMhC,EAAK,UAAU,WAA1E,+BAAUgC,QAHtB,6K,YC7DI,qBAAK,IAAD,wBAETG,EAAQC,qBAAWC,KACzB,EAAwBtC,oBAAS,GAAjC,mBAAOuC,EAAP,KAAaC,EAAb,KASA,OAPArB,qBAAU,WAEV,OADIiB,EAAMK,OACH,WACHL,EAAMM,OACNF,GAAQ,MACR,IAEG,sBAAKG,GAAG,UAAR,qCAEH,6DAAqB,6EACrB,eAACC,EAAA,EAAD,CAAKD,GAAG,cAAR,UAEI,cAACE,EAAA,EAAD,CAAKC,GAAI,EAAT,SACI,cAAC,IAAD,CAAOH,GAAG,QAAQnD,OAAQ4C,EAAMW,YAAaC,SAAUT,MAG3D,eAACM,EAAA,EAAD,CAAKC,GAAI,EAAT,UACI,cAACG,EAAA,EAAD,CAAeC,UAAU,OAAOC,UAAU,iBAAiBC,MAAO,gEAAO,mEAAP,oBAAlE,SACA,eAACC,EAAA,EAAKC,OAAN,CAAaC,MAAK,oBAAEnB,EAAMoB,gBAAR,aAAE,EAAgBC,aAAlB,QAA2B,OAAQC,SAAU,YAAiB,IAAdC,EAAa,EAAbA,OAC9DvB,EAAMwB,SAASD,EAAOJ,QAD1B,WAGC,UAAAnB,EAAMyB,eAAN,eAAeJ,QAASK,OAAOC,KAAP,UAAY3B,EAAMyB,eAAlB,aAAY,EAAeJ,OAAOO,KAAI,SAAChC,EAAGiC,GAAJ,OAAU,wBAAgBV,MAAOvB,EAAvB,oCAA2BA,GAAdiC,QACrF,UAAC7B,EAAMyB,eAAP,OAAC,EAAeJ,QAAS,sFAAa,QAItC,cAACR,EAAA,EAAD,CAAeC,UAAU,OAAOC,UAAU,iBAAiBC,MAAO,gEAAO,mEAAP,wBAAlE,SACD,eAACC,EAAA,EAAKC,OAAN,CAAaC,MAAK,oBAAEnB,EAAMoB,gBAAR,aAAE,EAAgBU,kBAAlB,QAAgC,YAAaR,SAAU,YAAe,IAAD,IAAZC,EAAY,EAAZA,OACvEvB,EAAMwB,SAAN,oBAAexB,EAAMoB,gBAArB,aAAe,EAAgBC,aAA/B,QAAwC,OAAQE,EAAOJ,QAD3D,UAGCnB,EAAM+B,aAAeL,OAAOC,KAAK3B,EAAM+B,aAAaH,KAAI,SAAChC,EAAGiC,GAAJ,OAAU,wBAAgBV,MAAOvB,EAAvB,oCAA2BA,GAAdiC,OAC9E7B,EAAM+B,aAAe,0FAAa,QAIpC,cAAClB,EAAA,EAAD,CAAeC,UAAU,OAAOC,UAAU,iBAAiBC,MAAO,gEAAO,0DAAP,oBAAlE,SACA,eAACC,EAAA,EAAKC,OAAN,CAAaC,MAAK,oBAAEnB,EAAMoB,gBAAR,aAAE,EAAgBY,aAAlB,QAA2B,OAAQV,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBvB,EAAMiC,SAASV,EAAOJ,QAArG,WACC,UAAAnB,EAAMyB,eAAN,eAAeO,QAASN,OAAOC,KAAP,UAAY3B,EAAMyB,eAAlB,aAAY,EAAeO,OAAOJ,KAAI,SAAChC,EAAGiC,GAAJ,OAAU,wBAAgBV,MAAOvB,EAAvB,oCAA2BA,GAAdiC,QACrF,UAAC7B,EAAMyB,eAAP,OAAC,EAAeO,QAAS,sFAAa,QAIvC,kEACA,cAACf,EAAA,EAAKiB,OAAN,CAAa3B,GAAG,cAAcS,MAAM,OAAOF,UAAU,wBAAwBqB,KAAK,aAAab,SAAU,SAACc,GAAD,OAAKhC,GAAQ,SAAAiC,GAAC,OAAKA,MAAIC,eAAgBnC,IAChJ,cAAChD,EAAD,CAAWC,OAAQ4C,EAAMW,YAAatD,KAAM8C,aArCjD","file":"static/js/4.026be887.chunk.js","sourcesContent":["import {useEffect, useRef, useState} from 'react';\r\n\r\nlet time = performance.now();\r\nconst microphone_gain_data = new Array(10);\r\n\r\nexport default function AudioGain({stream, show}) {\r\n    const ref            = useRef();\r\n    let   ctx            = useRef();\r\n    let   analyser       = useRef();\r\n    let   microphone     = useRef();\r\n    let   javascriptNode = useRef();\r\n    let   [vol, setVol]  = useState(0);\r\n    \r\n    window.ctx = ctx;\r\n    useEffect(()=>{\r\n        /*if(ctx){\r\n            ctx.close();\r\n            javascriptNode = undefined;\r\n        }\r\n        time = performance.now();*/\r\n        ctx.current            = new AudioContext();\r\n        analyser.current       = ctx.current?.createAnalyser();\r\n        microphone.current     = ctx.current?.createMediaStreamSource(stream);\r\n        javascriptNode.current = ctx.current?.createScriptProcessor(256, 1, 1);\r\n      \r\n        analyser.current.smoothingTimeConstant = 0.8;\r\n        analyser.current.fftSize = 1024;\r\n      \r\n        microphone.current.connect(analyser.current);\r\n        analyser.current.connect(javascriptNode.current);\r\n        javascriptNode.current.connect(ctx.current?.destination);\r\n        javascriptNode.current.onaudioprocess = onAudioProcess;\r\n  \r\n    }, [stream]);\r\n\r\n    useEffect(()=>{\r\n        if(!ctx) return;\r\n        if(show) \r\n            ctx.current?.resume();\r\n        else {\r\n            ctx.current?.suspend();\r\n            setVol(0);\r\n        }\r\n\r\n        return ()=>{\r\n            ctx.current?.suspend();\r\n        }\r\n    }, [show]);\r\n\r\n    function onAudioProcess(){\r\n        if(performance.now() - time < 24 ) return;\r\n        time = performance.now();\r\n\r\n        var array = new Uint8Array(analyser.current?.frequencyBinCount);\r\n        analyser.current?.getByteFrequencyData(array);\r\n        const avg = array.reduce((a,b) => a + b, 0) / array.length;\r\n\r\n        microphone_gain_data.shift();\r\n        microphone_gain_data.push(Math.round(avg));\r\n        window.microphone_gain_data = microphone_gain_data;\r\n\r\n        //let v = .75;\r\n        //console.log(avg);\r\n        //setVol(a => Math.round(a * (1-v) + avg * v));\r\n        setVol(avg);\r\n\r\n    }\r\n\r\n\r\n    return <>\r\n        <div className=\"pids-wrapper\" ref={ref}>{\r\n            Array.from({length:10},(v,i)=>{\r\n                return <div key={i} className={`pid`} style={{background:  (i*10)<vol? '#69ce2b':'#e6e7e8'}}></div>\r\n            })\r\n        }\r\n        </div>\r\n        <style global jsx>{`\r\n            .pids-wrapper{\r\n                width: 100%;\r\n                line-height: 1.5rem;\r\n            }\r\n            .pid{\r\n                width: calc(10% - 2px);\r\n                height: 10px;\r\n                display: inline-block;\r\n                margin: 1px;\r\n            }\r\n        `}</style>\r\n    </>;\r\n}","import {useContext, useEffect, useState} from \"react\"\r\nimport {Row, Col, FloatingLabel, Form} from 'react-bootstrap'\r\n\r\nimport Video from 'partials/video'\r\nimport AudioGain from 'components/audioGain'\r\nimport { MediaContext } from 'utils/ctx_mediadevices'\r\n\r\n\r\nexport default ()=>{\r\n\r\n    const media = useContext(MediaContext);\r\n    const [test, setTest] = useState(false);\r\n\r\n    useEffect(()=>{\r\n        media.init();\r\n    return ()=>{\r\n        media.stop();\r\n        setTest(false);\r\n    }}, []);\r\n\r\n    return <div id='devices'>\r\n\r\n        <h3 className=\"pt-2\"><b>Step 1: Devices</b></h3>\r\n        <Row id='devices-row'>\r\n\r\n            <Col md={6}>\r\n                <Video id=\"local\" stream={media.localStream} isLocal={!test} />\r\n            </Col>\r\n\r\n            <Col md={6}>\r\n                <FloatingLabel className=\"pb-1\" controlId=\"floatingSelect\" label={<span> <i className=\"bi bi-camera-video\" /> Video devices</span>}>\r\n                <Form.Select value={media.settings?.video ?? \"None\"} onChange={({ target }) => {\r\n                    media.setVideo(target.value);\r\n                }}>\r\n                {media.devices?.video && Object.keys(media.devices?.video).map((v, k) => <option key={k} value={v}>{v}</option>)}\r\n                {!media.devices?.video && <option key={0}>No video devices found</option>}\r\n                </Form.Select>\r\n                </FloatingLabel>\r\n\r\n                {<FloatingLabel className=\"pb-1\" controlId=\"floatingSelect\" label={<span> <i className=\"bi bi-camera-video\" /> Video resolutions</span>}>\r\n                <Form.Select value={media.settings?.resolution ?? \"Undefined\"} onChange={({target}) => {\r\n                    media.setVideo(media.settings?.video ?? \"None\", target.value);\r\n                }}>\r\n                {media.resolutions && Object.keys(media.resolutions).map((v, k) => <option key={k} value={v}>{v}</option>)}\r\n                {!media.resolutions && <option key={0}>No video resolutions found</option>}\r\n                </Form.Select>\r\n                </FloatingLabel>}\r\n\r\n                <FloatingLabel className=\"pb-1\" controlId=\"floatingSelect\" label={<span> <i className=\"bi bi-mic\" /> Audio devices</span>}>\r\n                <Form.Select value={media.settings?.audio ?? \"None\"} onChange={({ target }) => media.setAudio(target.value)}>\r\n                {media.devices?.audio && Object.keys(media.devices?.audio).map((v, k) => <option key={k} value={v}>{v}</option>)}\r\n                {!media.devices?.audio && <option key={0}>No audio devices found</option>}\r\n                </Form.Select>\r\n                </FloatingLabel>\r\n                \r\n                <div className='d-flex'>\r\n                <Form.Switch id=\"hear-switch\" label=\"test\" className=\"me-2 user-select-none\" name=\"test-input\" onChange={(e)=>setTest(t => !t)} defaultChecked={test}/>\r\n                <AudioGain stream={media.localStream} show={test} />\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n\r\n        <style global jsx>{`\r\n   \r\n            #page video {\r\n                object-fit: cover !important;\r\n                max-height: 25vh;\r\n            }\r\n\r\n            #devices-row{\r\n                overflow-y: scroll;\r\n            }\r\n\r\n            @media only screen and (orientation: landscape) and (max-height: 671px) {           \r\n                #devices .row{\r\n                    flex-direction: row !important;\r\n                    .col{\r\n                        align-self: start;\r\n                    }\r\n                }\r\n            }  \r\n        `}</style>\r\n    </div>\r\n}"],"sourceRoot":""}