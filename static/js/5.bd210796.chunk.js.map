{"version":3,"sources":["pages/Environment.jsx","../lib/bra/videoAnalyzer.js"],"names":["videoAnalyzer","canvas","document","createElement","context","getContext","analyze","video","width","videoWidth","height","videoHeight","drawImage","pixels","getImageData","data","average","variance","n","i","length","y","Math","pow","sqrt","media","useContext","MediaContext","useState","test","setTest","analyzing","setAnalyzing","useEffect","init","interval","setInterval","querySelector","getElementById","innerHTML","floor","brightness","contrast","setTimeout","stop","clearInterval","id","Row","Col","md","stream","localStream","isLocal","className","Spinner","style","verticalAlign","color","animation","size","Card","marginTop","Body","Title","Text"],"mappings":"yNAOMA,EAAgB,ICLf,WAEH,IAAIC,EAASC,SAASC,cAAc,UAChCC,EAAUH,EAAOI,WAAW,MA6DhC,MAAO,CACHC,QA5DU,SAAUC,GAEpB,IAAKA,EAED,MAAO,CAAE,WAAc,EAAG,SAAY,GAG1C,IAAIC,EAAQD,EAAME,WACdC,EAASH,EAAMI,YACnB,GAAIH,GAAS,GAAKE,GAAU,EAExB,MAAO,CAAE,WAAc,EAAG,SAAY,GAG1CT,EAAOO,MAAQA,EACfP,EAAOS,OAASA,EAChBN,EAAQQ,UAAUL,EAAO,EAAG,EAAGC,EAAOE,GAWtC,IATA,IACIG,EADYT,EAAQU,aAAa,EAAG,EAAGN,EAAOE,GAC3BK,KAEnBC,EAAU,EACVC,EAAW,EAIXC,EAAI,EACCC,EAAI,EAAGA,EAAIN,EAAOO,OAAQD,GAAG,EACtC,CAMIH,IAFQ,MAHAH,EAAOM,GAAK,KAGA,MAFZN,EAAOM,EAAI,GAAK,KAEQ,MADxBN,EAAOM,EAAI,GAAK,KAGRH,GAAWE,EAE3BA,IAIJ,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAOO,OAAQD,GAAG,EACtC,CACI,IAGIE,EAAI,MAHAR,EAAOM,GAAK,KAGA,MAFZN,EAAOM,EAAI,GAAK,KAEQ,MADxBN,EAAOM,EAAI,GAAK,KAGxBF,GAAYK,KAAKC,IAAIF,EAAIL,EAAS,GAStC,OANAC,GAAYC,EAML,CAAE,WAHQF,EAGkB,SALfM,KAAKE,KAAKP,GAGKD,MDnD5B,qBAEX,IAAMS,EAAQC,qBAAWC,KACzB,EAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KA+BA,OA7BAC,qBAAU,WAENR,EAAMS,OACN,IAAMC,EAaCC,aAAY,WAEfJ,GAAa,GACb,IAAMzB,EAAQL,SAASmC,cAAc,kBAC/BtB,EAAOf,EAAcM,QAASC,EAAM8B,cAAc,UACxDnC,SAASoC,eAAe,kBAAkBC,UAAYjB,KAAKkB,MAAwB,IAAlBzB,EAAK0B,YAAoB,IAC1FvC,SAASoC,eAAe,gBAAgBC,UAAYjB,KAAKkB,MAAsB,IAAhBzB,EAAK2B,UAAkB,IAEtFC,YAAW,kBAAMX,GAAa,KAAQ,OAEvC,KArBH,OAAO,WAEHP,EAAMmB,OACNd,GAAQ,GACRe,cAAeV,MAGpB,IAiBI,sBAAKW,GAAG,UAAR,qCAEH,6DAAqB,yEACrB,eAACC,EAAA,EAAD,CAAKD,GAAG,cAAR,UAEI,cAACE,EAAA,EAAD,CAAKC,GAAI,EAAT,SACI,cAAC,IAAD,CAAOH,GAAG,QAAQI,OAAQzB,EAAM0B,YAAaC,SAAUvB,EAAMwB,UAAY,oBAG7E,eAACL,EAAA,EAAD,CAAKC,GAAI,EAAT,UAEI,sFAA2ClB,EAAY,cAACuB,EAAA,EAAD,CAASC,MAAO,CAAEC,cAAe,UAAWC,MAAO,gBAAkBC,UAAU,OAAOC,KAAK,OAAU,gCAC5J,cAACC,EAAA,EAAD,CAAML,MAAO,CAAE/C,MAAO,QAASqD,UAAW,UAA1C,SACI,eAACD,EAAA,EAAKE,KAAN,WACI,eAACF,EAAA,EAAKG,MAAN,WAAY,4EAAZ,kBACA,cAACH,EAAA,EAAKI,KAAN,CAAWlB,GAAG,iBAAd,oBAMR,cAACc,EAAA,EAAD,CAAML,MAAO,CAAE/C,MAAO,QAASqD,UAAW,WAA1C,SACI,eAACD,EAAA,EAAKE,KAAN,WACI,eAACF,EAAA,EAAKG,MAAN,WAAY,yEAAZ,iBACA,cAACH,EAAA,EAAKI,KAAN,CAAWlB,GAAG,eAAd,0BAxBb","file":"static/js/5.bd210796.chunk.js","sourcesContent":["import { useContext, useEffect, useState } from \"react\"\r\nimport { Row, Col, Card, Spinner } from 'react-bootstrap'\r\nimport { MediaContext } from 'utils/ctx_mediadevices'\r\nimport { VideoAnalyzer } from 'lib_bra/videoAnalyzer'\r\n\r\nimport Video from 'partials/video'\r\n\r\nconst videoAnalyzer = new VideoAnalyzer();\r\nlet analyzing = false;\r\n\r\nexport default ()=>{\r\n\r\n    const media = useContext(MediaContext);\r\n    const [test, setTest] = useState(false);\r\n    const [analyzing, setAnalyzing] = useState(false);\r\n\r\n    useEffect(()=>{\r\n        \r\n        media.init();\r\n        const interval = beginVideoAnalysis();\r\n        \r\n        return () => {\r\n\r\n            media.stop();\r\n            setTest(false);\r\n            clearInterval( interval );\r\n        }\r\n    \r\n    }, []);\r\n\r\n    function beginVideoAnalysis() {\r\n\r\n        return setInterval(() => {\r\n\r\n            setAnalyzing(true);\r\n            const video = document.querySelector('.analysedVideo');\r\n            const data = videoAnalyzer.analyze( video.querySelector(\"video\") );\r\n            document.getElementById('brightnessText').innerHTML = Math.floor(data.brightness * 100) + '%';\r\n            document.getElementById('contrastText').innerHTML = Math.floor(data.contrast * 100) + '%';\r\n\r\n            setTimeout(() => setAnalyzing(false), 750);\r\n\r\n        }, 2000);\r\n    }\r\n\r\n    return <div id='devices'>\r\n\r\n        <h3 className=\"pt-2\"><b>Environment</b></h3>\r\n        <Row id='devices-row'>\r\n\r\n            <Col md={6}>\r\n                <Video id=\"local\" stream={media.localStream} isLocal={!test} className={ 'analysedVideo' }/>\r\n            </Col>\r\n\r\n            <Col md={6}>\r\n\r\n                <h4 className=\"pt-2\">Lighting conditions { analyzing ? <Spinner style={{ verticalAlign: '-0.02em', color: 'lightskyblue' }} animation=\"grow\" size=\"sm\" /> : <></> }</h4>\r\n                <Card style={{ width: '18rem', marginTop: '0.5rem' }}>\r\n                    <Card.Body>\r\n                        <Card.Title><i className=\"bi bi-sm bi-brightness-high\"></i>  Brightness</Card.Title>\r\n                        <Card.Text id='brightnessText'>\r\n                        -\r\n                        </Card.Text>\r\n                    </Card.Body>\r\n                </Card>\r\n\r\n                <Card style={{ width: '18rem', marginTop: '0.25rem' }}>\r\n                    <Card.Body>\r\n                        <Card.Title><i className=\"bi bi-sm bi-diamond-half\"></i>  Contrast </Card.Title>\r\n                        <Card.Text id='contrastText'>\r\n                        -\r\n                        </Card.Text>\r\n                    </Card.Body>\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n\r\n        <style global jsx>{`\r\n   \r\n            .bi.bi-sm{\r\n                font-size: 1rem;\r\n                vertical-align: 0.07rem;\r\n            }\r\n\r\n            #page video {\r\n                object-fit: cover !important;\r\n                max-height: 25vh;\r\n            }\r\n\r\n            #devices-row{\r\n                overflow-y: scroll;\r\n            }\r\n\r\n            @media only screen and (orientation: landscape) and (max-height: 671px) {           \r\n                #devices .row{\r\n                    flex-direction: row !important;\r\n                    .col{\r\n                        align-self: start;\r\n                    }\r\n                }\r\n            }  \r\n        `}</style>\r\n    </div>\r\n}","\"use strict\";\r\n\r\nexport function VideoAnalyzer()\r\n{\r\n    let canvas = document.createElement(\"canvas\");\r\n    let context = canvas.getContext(\"2d\");\r\n\r\n    let analyze = function( video )\r\n    {\r\n        if( !video )\r\n        {\r\n            return { \"brightness\": 0, \"contrast\": 0 };\r\n        }\r\n\r\n        let width = video.videoWidth;\r\n        let height = video.videoHeight;\r\n        if( width <= 0 || height <= 0 )\r\n        {\r\n            return { \"brightness\": 0, \"contrast\": 0 };\r\n        }\r\n\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        context.drawImage(video, 0, 0, width, height);\r\n\r\n        let imageData = context.getImageData(0, 0, width, height);\r\n        let pixels = imageData.data;\r\n\r\n        let average = 0;\r\n        let variance = 0;\r\n        let standardDeviation = 0;\r\n\r\n        // Calculate incremental average.\r\n        let n = 1;\r\n        for( let i = 0; i < pixels.length; i+=4 )\r\n        {\r\n            let r = pixels[i] / 255;\r\n            let g = pixels[i + 1] / 255;\r\n            let b = pixels[i + 2] / 255;\r\n            let y = 0.299 * r + 0.587 * g + 0.114 * b;\r\n\r\n            average += (y - average) / n;\r\n\r\n            n++;\r\n        }\r\n\r\n        // Calculate variance and standard deviation.\r\n        for( let i = 0; i < pixels.length; i+=4 )\r\n        {\r\n            let r = pixels[i] / 255;\r\n            let g = pixels[i + 1] / 255;\r\n            let b = pixels[i + 2] / 255;\r\n            let y = 0.299 * r + 0.587 * g + 0.114 * b;\r\n\r\n            variance += Math.pow(y - average, 2);\r\n        }\r\n\r\n        variance /= n;\r\n        standardDeviation = Math.sqrt(variance);\r\n\r\n        let brightness = average;\r\n        let contrast = standardDeviation / average;\r\n\r\n        return { \"brightness\": brightness, \"contrast\": contrast };\r\n    };\r\n\r\n    return {\r\n        analyze\r\n    };\r\n}"],"sourceRoot":""}