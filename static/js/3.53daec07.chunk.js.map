{"version":3,"sources":["components/battery.jsx","pages/Battery.jsx"],"names":["Battery","battery","useRef","level","charging","chargingTime","dischargingTime","useState","setState","percentage","setPercentage","useEffect","id","setInterval","a","navigator","getBattery","then","b","current","s","clearInterval","n","Math","ceil","style","width","message","Row","Col","md","className"],"mappings":"2PAEe,SAASA,IAAU,IAAD,UACvBC,EAAUC,iBAAO,CAACC,MAAM,EAAEC,UAAS,EAAOC,aAAa,EAAGC,gBAAgB,IAChF,EAA0BC,mBAAS,GAAnC,mBAAcC,GAAd,WACA,EAAoCD,mBAAS,GAA7C,mBAAOE,EAAP,KAAmBC,EAAnB,KA2BA,OArBAC,qBAAU,WACN,IAAMC,EAAKC,YAAW,sBAAC,sBAAAC,EAAA,sDACnBC,UAAUC,aAAaC,MAAK,SAAAC,GACxBjB,EAAQkB,QAAUD,EAClBV,GAAS,SAAAY,GAAC,QAAMA,QAHD,2CAKpB,KACH,OAAO,WACHC,cAAcT,MAEnB,IAEHD,qBAAU,WACN,IAAMC,EAAKC,aAAY,WAjB3B,IAAcC,EAAGI,EAAGI,EAkBZZ,EAAca,KAAKC,MAlBbV,EAkBuBL,EAlBpBS,EAkBwD,IAAxBjB,EAAQkB,QAAQhB,OAjBrD,GADQmB,EAkB0D,MAjBzDR,EAAIQ,EAAIJ,OAkBtB,IACH,OAAO,WACHG,cAAcT,OAIf,qCACP,sBAAKA,GAAG,eAAR,iDACI,uEACI,+DACI,qBAA4Ba,MAAO,CAACC,MAAM,GAAD,OAA6B,KAAzB,UAAAzB,EAAQkB,eAAR,eAAiBhB,OAArB,MAAzC,4CAGL,4DAAOM,EAAP,OAA2B,UAAAR,EAAQkB,eAAR,SAAiBf,SAAW,SAAM,GAC7D,0DACA,QAAC,EAAAH,EAAQkB,eAAT,OAAC,EAAiBf,SAAlB,8BACeH,EAAQkB,eADvB,aACe,EAAiBd,aADhC,oCAEgBJ,EAAQkB,eAFxB,aAEgB,EAAiBb,gBAFjC,UATA,ssCC3BI,SAASN,IACpB,MAA0BO,mBAAS,GAAnC,mBAAcC,GAAd,WACMP,EAAUC,iBAAO,CAACC,MAAM,EAAEC,UAAS,EAAOC,aAAa,EAAGC,gBAAgB,IAEhFK,qBAAU,WACN,IAAMC,EAAKC,YAAW,sBAAC,sBAAAC,EAAA,sDACnBC,UAAUC,aAAaC,MAAK,SAAAC,GACxBjB,EAAQkB,QAAUD,EAClBV,GAAS,SAAAY,GAAC,QAAMA,QAHD,2CAKpB,KACH,OAAO,WACHC,cAAcT,MAEnB,IAIH,IAAMe,EAAO,4JAET1B,EAAQE,MAAQ,IAAO,sEAAmE,qCAFjF,UAKb,OAAO,sBAAKS,GAAG,UAAR,qCACH,6DAAqB,mFACrB,eAACgB,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAKC,GAAI,EAAT,SACI,cAAC9B,EAAD,MAEJ,cAAC6B,EAAA,EAAD,CAAKC,GAAI,EAAT,SACI,cAAC,IAAD,CAAIC,UAAU,wBAAd,SAAuCJ,SAP5C","file":"static/js/3.53daec07.chunk.js","sourcesContent":["import { useState, useRef, useEffect } from 'react'\r\n\r\nexport default function Battery(){\r\n    const battery = useRef({level:0,charging:false, chargingTime:0, dischargingTime:0});\r\n    const [state, setState] = useState(0);\r\n    const [percentage, setPercentage] = useState(0);\r\n\r\n    function lerp(a, b, n){\r\n        return (1 - n) * a + n * b;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const id = setInterval(async () => {\r\n            navigator.getBattery().then(b => { //charging:true/false //chargingTime //dischargingTime //level \r\n                battery.current = b;\r\n                setState(s => ++s);\r\n            })\r\n        }, 500);\r\n        return () => {\r\n            clearInterval(id);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const id = setInterval(() => {\r\n            setPercentage(Math.ceil(lerp(percentage, battery.current.level * 100, .5 * 0.32)));\r\n        }, 30);\r\n        return () => {\r\n            clearInterval(id);\r\n        }\r\n    })\r\n\r\n    return <>\r\n    <div id=\"battery-icon\" className=\"text-center\">\r\n        <div className=\"battery-shape\">\r\n            <div className=\"level\">\r\n                <div className=\"percentage\" style={{width:`${battery.current?.level * 100}%`}}></div>\r\n            </div>\r\n        </div>\r\n           <span>{percentage}%</span>{battery.current?.charging ? '⚡' : ''}\r\n           <span>{\r\n           (battery.current?.charging)\r\n           ? `(full in: ${battery.current?.chargingTime})` \r\n           : `(empty in: ${battery.current?.dischargingTime})`\r\n           }</span>\r\n    </div>\r\n    <style global jsx>{`\r\n            @import \"src/variables.scss\";\r\n            #battery-icon{\r\n                max-width: 150px;\r\n                margin: auto;\r\n            }\r\n            .battery-shape{\r\n                position: relative;\r\n                min-width: 140px;\r\n                min-height: 65px;\r\n                border: 3px solid #333;\r\n                margin: 20px 0;\r\n                border-radius:10px;\r\n                .dark > & {\r\n                    border-color: #fff;\r\n                }\r\n\r\n                &::before{\r\n                    content: \"\";\r\n                    position: absolute;\r\n                    top: 50%;\r\n                    right: -12px;\r\n                    transform: translateY(-50%);\r\n                    width: 7px;\r\n                    height:16px;\r\n                    background: #333;\r\n                    border-top-right-radius: 4px;\r\n                    border-bottom-right-radius: 4px;\r\n\r\n                    .dark > & {\r\n                        background: #fff;\r\n                    }\r\n                }\r\n\r\n                &::after{\r\n                    content: \"\";\r\n                    position: absolute;\r\n                    top:0;\r\n                    left: 0;\r\n                    width: 100%;\r\n                    height:50%;\r\n                    background: rgba(255,255,255,.1);\r\n                }\r\n\r\n                .level{\r\n                    position: absolute;\r\n                    top: 4px;  \r\n                    left: 4px;\r\n                    right: 4px;\r\n                    bottom: 4px;\r\n                    border-radius: 4px;\r\n                    overflow: hidden;\r\n                }\r\n\r\n                .percentage{\r\n                    transition: width 1s cubic-bezier(0.5, 0.28, 0, 1.04);\r\n                    position: absolute;\r\n                    top: 0;\r\n                    left: 0;\r\n                    height: 100%;\r\n                    width: 50%;\r\n                    background: linear-gradient(90deg, $color3, lighten($color4,10%));\r\n                    border-radius: 4px;\r\n                    \r\n                    .dark > & {\r\n                        background: linear-gradient(90deg, lighten($color4,10%), $color3);\r\n                    }\r\n                }\r\n            }\r\n\r\n            .percent{\r\n                color: $color4;\r\n                font-size: 2em;\r\n                font-weight: 600;\r\n            }\r\n            \r\n        `}</style>\r\n    </>\r\n}\r\n\r\n/*\r\n               {battery.current && JSON.stringify({\r\n                    charging: battery.current.charging\r\n                    , level: battery.current.level\r\n                    , chargingTime: battery.current.chargingTime\r\n                    , dischargingTime: battery.current.dischargingTime\r\n                }, 0, 2)}\r\n*/","import { useState, useRef, useEffect } from 'react'\r\nimport { Row, Col } from 'react-bootstrap'\r\nimport MD from 'utils/md'\r\nimport { default as BatteryIcon } from 'components/battery'\r\n\r\nexport default function Battery() {\r\n    const [state, setState] = useState(0);\r\n    const battery = useRef({level:0,charging:false, chargingTime:0, dischargingTime:0});\r\n    \r\n    useEffect(() => {\r\n        const id = setInterval(async () => {\r\n            navigator.getBattery().then(b => { //charging:true/false //chargingTime //dischargingTime //level \r\n                battery.current = b;\r\n                setState(s => ++s);\r\n            })\r\n        }, 500);\r\n        return () => {\r\n            clearInterval(id);\r\n        }\r\n    }, []);\r\n\r\n    //message explaining the importance of having enough battery charge for the streaming\r\n    //The battery level is ${(battery.current.level*100).toFixed(0)}%. If you want to stream this video, you need at least 25% of the battery charge.\r\n    const message = `\r\n    While streaming, the battery charge will drop fast. If the battery is low, the performance will be affected and the stream may stop.\r\n    * ${battery.level < 0.25 ? '❌ You need at least 25% of the battery charge to stream video.' : '✔️ You can stream video.'}\r\n    `;\r\n\r\n    return <div id=\"battery\">\r\n        <h3 className=\"pt-2\"><b>Step 2: Battery Level</b></h3>\r\n        <Row>\r\n            <Col md={4}>\r\n                <BatteryIcon />\r\n            </Col>\r\n            <Col md={8}>\r\n                <MD className=\"pt-3 user-select-none\">{message}</MD>\r\n            </Col>\r\n        </Row>\r\n        <style global jsx>{`\r\n            @media only screen and (orientation: landscape) and (max-height: 671px) {           \r\n                #battery .row{\r\n                    flex-direction: row !important;\r\n                    .col{\r\n                        align-self: start;\r\n                    }\r\n                }\r\n            }  \r\n        `}</style>\r\n        \r\n    </div>\r\n}"],"sourceRoot":""}