{"version":3,"sources":["assets/img/selfie.png","assets/img/snipping.png","assets/img/score.png","pages/Selfie.jsx"],"names":["console","warn","images","Array","fill","style","width","src","selfie","alt","Pose","videoRef","useRef","media","useContext","MediaContext","useState","setState","DataURIToBlob","dataURI","splitDataURI","split","byteString","indexOf","atob","decodeURI","mimeString","ia","Uint8Array","length","i","charCodeAt","Blob","type","makeSelfie","event","current","canvas","document","createElement","videoWidth","height","videoHeight","getContext","drawImage","img","Image","toDataURL","target","id","score","Math","random","toFixed","transform","s","formData","FormData","append","fetch","method","headers","then","response","catch","error","useEffect","ready","srcObject","localStream","play","map","v","parseFloat","props","sort","max","Row","Col","md","muted","ref","className","k","position","onClick","Badge","bg"],"mappings":"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","file":"static/js/7.27e8bc6f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/selfie.7ba22bd2.png\";","export default __webpack_public_path__ + \"static/media/snipping.9b2d355a.png\";","export default __webpack_public_path__ + \"static/media/score.b94429f1.png\";","//https://github.com/google/mediapipe/issues/2346#issuecomment-888062233\r\n\r\nimport { useState, useRef, useEffect, useContext, useCallback  } from 'react'\r\nimport { Row, Col, ProgressBar, Form, Image as ReactImage, Button, Badge } from 'react-bootstrap'\r\nimport { MediaContext } from 'utils/ctx_mediadevices'\r\nimport MD from 'utils/md'\r\nimport selfie from 'assets/img/selfie.png'\r\nimport img1 from 'assets/img/snipping.png'\r\nimport img2 from 'assets/img/score.png'\r\nimport http from 'utils/http'\r\n\r\nconsole.warn = ()=>{}\r\nlet images = new Array(3).fill(<img style={{width:\"100%\"}}src={selfie} alt=\"0\"/>);\r\n\r\nexport default function Pose() {\r\n    const videoRef = useRef(null);\r\n    const media = useContext(MediaContext);\r\n    const [state, setState] = useState(0);\r\n\r\n    function DataURIToBlob(dataURI) {\r\n        const splitDataURI = dataURI.split(',')\r\n        const byteString = splitDataURI[0].indexOf('base64') >= 0 ? atob(splitDataURI[1]) : decodeURI(splitDataURI[1])\r\n        const mimeString = splitDataURI[0].split(':')[1].split(';')[0]\r\n\r\n        const ia = new Uint8Array(byteString.length)\r\n        for (let i = 0; i < byteString.length; i++)\r\n            ia[i] = byteString.charCodeAt(i)\r\n\r\n        return new Blob([ia], { type: mimeString })\r\n      }\r\n\r\n    function makeSelfie(event) {\r\n        if(!videoRef.current) return;\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = videoRef.current.videoWidth;\r\n        canvas.height = videoRef.current.videoHeight;\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);\r\n        const img = new Image();\r\n        img.src = canvas.toDataURL('image/png');\r\n        event.target.src = img.src;\r\n        event.target.alt = '1';\r\n        images[event.target.id] = <img src={img.src} score={Math.random().toFixed(2)} style={{transform:'scaleX(-1)'}}/>\r\n        setState(s => s+1);\r\n\r\n        const formData = new FormData();\r\n        formData.append('user',   DataURIToBlob(img.src), 'selfie.jpg');\r\n        formData.append('studio', DataURIToBlob(img.src), 'selfie2.jpg');\r\n\r\n        const headers = {\r\n            'Content-Type': 'multipart/form-data',\r\n        }\r\n\r\n        return fetch(\"https://admire-dev-iq.brainstorm3d.com/image/analyze\", \r\n        {method: 'POST',headers,formData})\r\n        .then(response =>  {debugger})\r\n        .catch(error => {debugger})\r\n\r\n    \r\n        //send to server\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(!media.ready) return;\r\n        videoRef.current.srcObject = media.localStream;\r\n        videoRef.current.play();\r\n    }, [media.ready, media.localStream]);\r\n\r\n    //intro message for the selfie for image quality assesment step\r\n    let message = `\r\n    The image quality assessment step will score if the image <b>has enough light</b> and <b>enough contrast</b>.\r\n    Take <b>3 selfies</b> with your face facing towards the camera. \r\n    The highlighted number shows the <b>best scored</b> capture.\r\n    `;\r\n    const [min,med,max] = images.map( v => parseFloat(v.props.score ?? 0)).sort()\r\n    return <>\r\n    <div id='selfie'>\r\n        <h3 className=\"pt-2\"><b>Step 4: Lighting Quality</b></h3>\r\n        <Row>\r\n        <Col md={6}>\r\n            <video muted style={{ transform: \"rotateY(180deg)\", width:\"100%\" }} ref={videoRef}></video>\r\n\r\n        </Col>\r\n        <Col md={6}>\r\n            <MD className=\"user-select-none\">{message}</MD>\r\n            <div id=\"carousel\" className=\"d-flex flex-horizontal\">\r\n            { images.map( (v,k) => <div style={{position:'relative', width: \"calc( 100% / 3)\"}} key={k} onClick={makeSelfie}>\r\n                <img src={v.src ?? v.props.src} alt={`Selfie ${k}`} style={v.style} id={k}/>\r\n                <Badge bg={parseFloat(v.props.score ?? 0) === max?\"success\":\"secondary\"}>{v.score ?? v.props.score}</Badge>\r\n            </div> )}\r\n            </div>\r\n        </Col>\r\n        </Row>\r\n    </div>\r\n\r\n    <style global jsx>{`\r\n        @import \"src/variables.scss\";\r\n        #selfie {\r\n            #carousel{\r\n                height: 100px; \r\n                &:nth-child(1) \r\n                {\r\n                    margin-left: 0px;\r\n                }\r\n                img {\r\n                    width: 100%;\r\n                    height: 100%;\r\n                    object-fit: cover;\r\n                    border: 1px solid rgba(0,0,0,0.1);\r\n                    margin-left: 1px;\r\n                    filter: opacity(80%);\r\n                    transition: all .25s ease-in-out;\r\n                    &:hover {\r\n                        filter: opacity(100%);\r\n                    }\r\n                }\r\n\r\n                .badge{\r\n                    position: absolute;\r\n                    top: .24rem;\r\n                    margin-left: .25rem;\r\n                }\r\n            }\r\n            \r\n        }\r\n\r\n        @media only screen and (orientation: landscape) and (max-height: 671px) {           \r\n   \r\n            #selfie {\r\n\r\n\r\n                .row{\r\n                    flex-direction: row !important;\r\n                    .col{\r\n                        align-self: start;\r\n                    }\r\n                }\r\n            }\r\n        }  \r\n    `}</style>\r\n    </>\r\n}"],"sourceRoot":""}